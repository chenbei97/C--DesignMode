一个案例:
    怪物的血量>400,怪物处于"凶悍"状态,会对主角进行反击
    怪物的血量(100,400],怪物处于"不安"状态,会对主角进行反击且呼叫支援
    怪物的血量(0,100],怪物处于"恐惧"状态,会进行逃跑
    怪物的血量<=0,怪物处于"死亡"状态,不能再被攻击
这个案例的一个实现是V1版本，使用了大量的if_else语句

现在把每个状态都写成单独的类，就像策略模式一样，不要在一个函数内依据条件判断使用何种策略

那么状态类可以作为怪物类的构造参数，怪物类持有一个状态类指针，并提供切换状态的函数

--- 快速理解应用 ---
ClassState作为Class的聚合属性
ClassState以Class*和其它参数作为构造函数参数
ClassState提供与Class完全重名的纯虚函数方法，子类可以进行重载实现不同的状态
对用户而言，使用Class的方法method，内部实际使用的是ClassState.method(this,Args...)