假设一种场景，游戏界面需要一个列表控件，列表控件最初什么也没有，只有一个文本编辑框
之后希望有带边框的列表控件、带滑动条的列表控件，以及带边框也带滑动条的列表控件
那么可能就需要定义一个基类，之后带边框的继承这个基类，带滑动条的也继承这个基类
之后水平滑动条和垂直滑动条还要区别开，可能又要继续带滑动条的列表控件，得到更多的子类

这样的问题在于，子类繁多，同时继承会导致父类的修改影响子类，且父类的很多方法子类可能用不上造成浪费
所以考虑引入装饰器模式，核心思想是组合复用，组合可以降低耦合关系，如果组合也可以达到目的，组合比继承好。

现在定义一个抽象控件类，然后列表控件类继承自它，分别定义在Control.h和ListCtrl.h中
现在引入装饰器类，这个装饰器类也继承自Control，区别是构造函数引入Control*参数,也就是被装饰的同类对象
然后装饰器类的draw方法实际上调用了Control*的draw方法，然后加入自己的其它功能代码，就实现了装饰功能
装饰器类不仅继承Control，也组合Control，定义在ControlDecorator.h中

现在开始定义装饰器子类，带边框的列表控件和带滚动条的列表控件，
分别定义在BorderDecorator.h和ScrollDecorator.h中

另一个例子是饮料问题
一杯普通饮料10元，加糖的多1元，加珍珠的2元，加牛奶的2元，都加的15，见other文件夹